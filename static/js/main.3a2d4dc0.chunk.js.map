{"version":3,"sources":["Components/Form.js","Components/List.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","name","age","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","props","addItem","onSubmit","this","type","placeholder","onChange","Component","List","items","deleteItem","allItems","length","map","item","key","className","onClick","App","i","findIndex","splice","Math","random","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAEqBA,E,2MACjBC,MAAM,CACFC,KAAM,GACNC,IAAK,I,EAGTC,aAAc,SAACC,GACX,EAAKC,SAAL,eACKD,EAAEE,OAAOC,GAAMH,EAAEE,OAAOE,S,EAIjCC,aAAc,SAACL,GAEX,GADAA,EAAEM,iBACyB,KAAxBN,EAAEE,OAAOL,KAAKO,OAAuC,KAAvBJ,EAAEE,OAAOJ,IAAIM,MAC1C,OAAO,EAEP,EAAKG,MAAMC,QAAQ,EAAKZ,OAC5B,EAAKK,SAAS,CACVJ,KAAM,GACNC,IAAK,M,wEAKT,OACI,0BAAMW,SAAUC,KAAKL,cACjB,2BAAQM,KAAK,OACLC,YAAY,kBACZT,GAAG,OACHC,MAAOM,KAAKd,MAAMC,KAClBgB,SAAUH,KAAKX,eAEvB,2BAAQY,KAAK,SACLC,YAAY,iBACZT,GAAG,MACHC,MAAOM,KAAKd,MAAME,IAClBe,SAAUH,KAAKX,eAEvB,4C,GAvCkBe,aC6BnBC,EA7BF,SAACR,GAAW,IACZS,EAAqBT,EAArBS,MAAOC,EAAcV,EAAdU,WAERC,EADSF,EAAMG,OAEXH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,IAAKD,EAAKlB,IACX,0BAAMoB,UAAU,QAAQF,EAAKxB,MAC7B,0BAAM0B,UAAU,OAAOF,EAAKvB,KAC5B,0BAAMyB,UAAU,cAAcC,QAAS,kBAAMP,EAAWI,EAAKlB,MAA7D,YAKZ,yBAAKoB,UAAU,SAAf,4BAGZ,OAEI,yBAAKA,UAAU,aACX,6BACI,0BAAMA,UAAU,cAAhB,QACA,0BAAMA,UAAU,aAAhB,OACA,0BAAMA,UAAU,gBAAhB,WAEHL,ICsBEO,G,iNA1Cb7B,MAAQ,CACNoB,MAAQ,CACN,CACEb,GAAG,EACHN,KAAM,QACNC,IAAK,IAEP,CACEK,GAAG,EACHN,KAAM,UACNC,IAAK,M,EAKXmB,WAAa,SAACd,GACN,IAACa,EAAS,EAAKpB,MAAdoB,MACDU,EAAIV,EAAMW,WAAU,SAAAN,GAAI,OAAIA,EAAKlB,KAAOA,KACxCa,EAAMY,OAAQF,EAAG,GACvB,EAAKzB,SAAS,CAACe,W,EAGjBR,QAAS,SAACa,GACRA,EAAKlB,GAAK0B,KAAKC,SADC,IAETd,EAAS,EAAKpB,MAAdoB,MACPA,EAAMe,KAAKV,GACX,EAAKpB,SAAS,CAACe,W,wEAGP,IACDA,EAASN,KAAKd,MAAdoB,MACP,OACE,yBAAKO,UAAU,iBACb,yCACA,kBAAC,EAAD,CAAMf,QAASE,KAAKF,UACpB,kBAAC,EAAD,CAAMQ,MAAOA,EACPC,WAAYP,KAAKO,kB,GAtCbH,cCOEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3a2d4dc0.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Form extends Component {\r\n    state={\r\n        name: '',\r\n        age: ''\r\n    }\r\n\r\n    handleChange =(e) => {\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit =(e) => {\r\n        e.preventDefault();\r\n        if(e.target.name.value === '' && e.target.age.value === '') {\r\n            return false\r\n        } else {\r\n            this.props.addItem(this.state)\r\n        this.setState({\r\n            name: '',\r\n            age: ''\r\n        })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input  type='text'\r\n                        placeholder='Enter Your Name'\r\n                        id='name'\r\n                        value={this.state.name}\r\n                        onChange={this.handleChange}\r\n                />\r\n                <input  type='number'\r\n                        placeholder='Enter Your Age'\r\n                        id='age'\r\n                        value={this.state.age}\r\n                        onChange={this.handleChange}\r\n                />\r\n                <button>Add</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nconst List = (props) => {\r\n    const   {items, deleteItem} = props,\r\n            Length = items.length,\r\n            allItems = Length ? (\r\n                items.map(item => {\r\n                    return (\r\n                        <div key={item.id}>\r\n                            <span className='name'>{item.name}</span>\r\n                            <span className='age'>{item.age}</span>\r\n                            <span className='action icon' onClick={() => deleteItem(item.id)}>&times;</span>\r\n                        </div>\r\n                    )\r\n                })\r\n            ) : (\r\n                <div className='error'>There's no items to show</div>\r\n            )\r\n\r\n    return (\r\n\r\n        <div className='listItems'>\r\n            <div>\r\n                <span className='name title'>Name</span>\r\n                <span className='age title'>Age</span>\r\n                <span className='action title'>Action</span>\r\n            </div>\r\n            {allItems}\r\n        </div>\r\n    )\r\n}\r\nexport default List","import React, {Component} from 'react';\nimport Form from './Components/Form';\nimport List from './Components/List';\nimport './App.css';\n\nclass App extends Component{\n\n  state = {\n    items : [\n      {\n        id:1,\n        name: 'Ahmed',\n        age: 20\n      },\n      {\n        id:2,\n        name: 'Mohamed',\n        age: 25\n      }\n    ]\n  }\n\n  deleteItem = (id) => {\n    const {items} = this.state,\n          i = items.findIndex(item => item.id === id)\n          items.splice (i, 1)\n    this.setState({items})\n  }\n\n  addItem =(item)=> {\n    item.id = Math.random();\n    const {items} = this.state;\n    items.push(item)\n    this.setState({items})\n  }\n\n  render() {\n    const {items} = this.state;\n    return (\n      <div className=\"App container\">\n        <h1>Todo List</h1>\n        <Form addItem={this.addItem}/>\n        <List items={items}\n              deleteItem={this.deleteItem}\n              />\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}